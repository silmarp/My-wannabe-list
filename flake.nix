{
  description = "Flake utils demo";

  inputs.flake-utils.url = "github:numtide/flake-utils";

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs {
          inherit system;
          config.allowUnfree = true;
          config.android_sdk.accept_licence = true;
          config.android_sdk.accept_license = true;
        };

        android = {
          platforms = [ "33" ];
          systemImageTypes = [ "google_apis" ];
          abis = [ "x86_64" ];
        };

        sdkArgs = {
          platformVersions = android.platforms;
          abiVersions = android.abis;
          systemImageTypes = android.systemImageTypes;

          includeSystemImages = true;
          includeEmulator = true;

          # Accepting more licenses declaratively:
          extraLicenses = [
            # Already accepted for you with the global accept_license = true or
            # licenseAccepted = true on androidenv.
            "android-sdk-license"

            # These aren't, but are useful for more uncommon setups.
            "android-sdk-preview-license"
            "android-googletv-license"
            "android-sdk-arm-dbt-license"
            "google-gdk-license"
            "intel-android-extra-license"
            "intel-android-sysimage-license"
            "mips-android-sysimage-license"
          ];
        };

        androidComposition = pkgs.androidenv.composeAndroidPackages sdkArgs;
        androidEmulator = pkgs.androidenv.emulateApp {
          name = "android-emulator";
          sdkExtraArgs = sdkArgs;
          enableGPU = true;
          avdHomeDir = "/home/silmar/.android/avd";
        };
        androidSdk = androidComposition.androidsdk;
        platformTools = androidComposition.platform-tools;
        jdk = pkgs.jdk;

        envDependencies = with pkgs; [
          gradle
          nodePackages."@vue/cli"
          nodePackages."cordova"
          nodejs
          nodePackages.vscode-langservers-extracted
        ];

      in
      {
        # packages = {};
        # apps = {};
        devShells = {
          default = with pkgs; mkShell {
            buildInputs = [
              gradle
              nodePackages."@vue/cli"
              nodePackages."cordova"
              nodejs
              nodePackages.vscode-langservers-extracted
            ];
          };
          androidemu = pkgs.mkShell rec {
              name = "androidenv-demo";
              packages = [
                androidSdk
                platformTools
                androidEmulator
                jdk
                pkgs.android-tools
                pkgs.android-studio
              ] ++ envDependencies;

              LANG = "C.UTF-8";
              LC_ALL = "C.UTF-8";
              JAVA_HOME = jdk.home;

              # Note: ANDROID_HOME is deprecated. Use ANDROID_SDK_ROOT.
              ANDROID_SDK_ROOT = "${androidSdk}/libexec/android-sdk";
              ANDROID_NDK_ROOT = "${ANDROID_SDK_ROOT}/ndk-bundle";
              ANDROID_HOME = "${androidSdk}/libexec/android-sdk";

              shellHook = ''
                # Write out local.properties for Android Studio.
                cat <<EOF > local.properties
                # This file was automatically generated by nix-shell.
                sdk.dir=$ANDROID_SDK_ROOT
                ndk.dir=$ANDROID_NDK_ROOT
                EOF
              '';
          };
        };
      }
    );
}
